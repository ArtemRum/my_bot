import asyncio
import logging
import sys

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)


TOKEN, ADMIN_ID = '6787439807:AAEmYhMTVNTgup9O5N2vC7Wb8h-JJeoywFg', 1319331554

bot = Bot(TOKEN)
db = Dispatcher()

users = [KeyboardButton(text="Каталог"), KeyboardButton(text="Корзина")]
admin = [users+[KeyboardButton(text='/edit')], 
         [KeyboardButton(text="/del"), KeyboardButton(text="/add"), KeyboardButton(text="/send")]]

catalog = ['Бот', 'Игра']

class Form(StatesGroup):
    type_order = State()
    text_order = State()

class Text(Filter):
    def __init__(self, my_text: str) -> None:
        self.my_text = my_text

    async def __call__(self, message: Message) -> bool:
        return message.text == self.my_text

@db.message(Command('start'))
async def starting(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer(f"{message.from_user.first_name} - админ, привет !",
                             reply_markup=ReplyKeyboardMarkup(keyboard=[admin[0]], 
                                                              resize_keyboard=True))
    else:
        await message.answer(f"{message.from_user.first_name}, привет!",
                             reply_markup=ReplyKeyboardMarkup(keyboard=[users], 
                                                              resize_keyboard=True))


@db.message(Command("edit"))
async def edit(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("Вход в режим редактирования", 
                             reply_markup=ReplyKeyboardMarkup(keyboard=[admin[1]], 
                                                              resize_keyboard=True))
    else:
        await message.reply("Да?)\nЗабавно~")
        
@db.message(Command("del"))
async def delIt(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("Пока не готово", 
                             reply_markup=ReplyKeyboardMarkup(keyboard=[admin[1]], 
                                                              resize_keyboard=True))
    else:
        await message.reply("Да?)\nЗабавно~")
        
@db.message(Command("add"))
async def add(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("Пока не готово")
    else:
        await message.reply("Да?)\nЗабавно~")
        
@db.message(Command("send"))
async def send(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("Пока не готово")
    else:
        await message.reply("Да?)\nЗабавно~")


@db.message(Text("Корзина"))
async def shopping_cart(message: types.Message, state: FSMContext):
    shopper = await state.get_data()


@db.message(Text("Каталог"))
async def сatalog(message: types.Message):
    if len(catalog) == 0: 
        await message.answer("Каталог пуст")
    else:
        await message.answer('\n'.join(catalog))


@db.message()
async def pool_mess(message: types.Message):
    if message.text in catalog:
        await message.reply("Для цены и подробностей напишите ему: @HERcGORIb")
    else:
        await message.reply("Я не понимаю тебя...")
    
async def main() -> None:
    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
    # And the run events dispatching
    await db.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
