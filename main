import asyncio
import logging
import sys

from aiogram import Bot, Dispatcher, F, Router, html
from aiogram.enums import ParseMode
from aiogram.filters import Command, Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)



TOKEN, ADMIN_ID = 'TOKEN', 1234567890

bot = Bot(TOKEN)
db = Dispatcher()

users = [KeyboardButton(text="Примеры работ"), KeyboardButton(text="Создать заказ")]
admin = [users+[KeyboardButton(text='/edit')], 
         [KeyboardButton(text="/del"), KeyboardButton(text="/add"), KeyboardButton(text="/send")]]

catalog = ['https://github.com/ArtemRum']

catal = [KeyboardButton(text=i) for i in catalog]


class Form(StatesGroup):
    type_order = State()
    text_order = State()

class Text(Filter):
    def __init__(self, my_text: str) -> None:
        self.my_text = my_text

    async def __call__(self, message: Message) -> bool:
        return message.text == self.my_text


@db.message(Command('start'))
async def starting(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer(f"{message.from_user.first_name} - админ, привет!",
                             reply_markup=ReplyKeyboardMarkup(keyboard=[admin[0]], 
                                                              resize_keyboard=True))
    else:
        await message.answer(f"{message.from_user.first_name}, привет!",
                             reply_markup=ReplyKeyboardMarkup(keyboard=[users], 
                                                              resize_keyboard=True))


@db.message(Command("edit"))
async def edit(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("Вход в режим редактирования", 
                             reply_markup=ReplyKeyboardMarkup(keyboard=[admin[1]], 
                                                              resize_keyboard=True))
    else:
        await message.reply("Да?)\nЗабавно~")
        
@db.message(Command("del"))
async def delIt(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("Пока не готово")
    else:
        await message.reply("Да?)\nЗабавно~")
        
@db.message(Command("add"))
async def add(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("Пока не готово")
    else:
        await message.reply("Да?)\nЗабавно~")
        
@db.message(Command("send"))
async def send(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("Пока не готово")
    else:
        await message.reply("Да?)\nЗабавно~")


@db.message(Text("Примеры работ"))
async def сatalog(message: Message):
    if len(catalog) == 0: 
        await message.answer("Пока нет.")
    else:
        await message.answer('\n'.join(catalog))
        
@db.message(Text("Создать заказ"))
async def shopping_cart(message: Message, state: FSMContext):
    await message.answer("Напишите описание для быстрого ознакомления.", 
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.type_order)

@db.message(Form.type_order)
async def typeOrder(message: Message, state: FSMContext):
    await state.update_data(type=message.text)
    await state.set_state(Form.text_order)
    await message.answer("Опишите заказ наиболее подробно, что бы я смог понять, смогу ли я правда это сделать.")

@db.message(Form.text_order)
async def textOrder(message: Message, state: FSMContext):
    f = await state.get_data()
    await message.answer("Спасибо! В течение дня с вами свяжутся для уточнения цены и сроков.")
    await bot.send_message(ADMIN_ID, '@'+message.from_user.username+'\n'+f['type']+'\n'+message.text)
    
async def main() -> None:
    bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
    await db.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
